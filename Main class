import processing.core.PApplet;
public class Main extends PApplet {
    Racket paddle;
    Ball ball;
    Brick[][] bricks;
    int rows = 5;
    int cols = 10;
    int brickWidth;
    int brickHeight;
    int score = 0;
    int lives = 3;

    public static void main(String[] args) {
        PApplet.main("Main");
    }

    public void settings() {
        size(800, 600);
    }

    public void setup() {
        paddle = new Racket(this, width / 2, height - 50, 100, 20);
        ball = new Ball(this, width / 2, height / 2, 15);
        brickWidth = width / cols;
        brickHeight = 20;
        bricks = new Brick[rows][cols];
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                bricks[i][j] = new Brick(this, j * brickWidth, i * brickHeight, brickWidth, brickHeight);
            }
        }
    }

    public void draw() {
        background(0);
        paddle.update();
        paddle.draw();
        ball.update();
        ball.draw();
        checkCollisions();
        drawBricks();
        displayScore();
        displayLives();

        if (lives <= 0) {
            textSize(32);
            fill(255, 0, 0);
            textAlign(CENTER);
            text("Game Over", width / 2, height / 2);
            noLoop();
        }
    }

    public void keyPressed() {
        if (key == 'a' || key == 'A') {
            paddle.move(-1);
        } else if (key == 'd' || key == 'D') {
            paddle.move(1);
        }
    }

    public void keyReleased() {
        paddle.stop();
    }

    void checkCollisions() {
        // Ball and paddle collision
        if (ball.intersects(paddle)) {
            ball.reverseY();
        }

        // Ball and brick collision
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                Brick brick = bricks[i][j];
                if (!brick.isDestroyed() && ball.intersects(brick)) {
                    ball.reverseY();
                    brick.destroy();
                    score += 10;
                }
            }
        }

        // Ball out of bounds
        if (ball.y > height) {
            lives--;
            ball.reset();
        }
    }

    void drawBricks() {
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                bricks[i][j].draw();
            }
        }
    }

    void displayScore() {
        fill(255);
        textSize(16);
        textAlign(LEFT);
        text("Score: " + score, 10, height - 10);
    }

    void displayLives() {
        fill(255);
        textSize(16);
        textAlign(RIGHT);
        text("Lives: " + lives, width - 10, height - 10);
    }
}
